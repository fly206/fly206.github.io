[
  
  {
    "title": "iw 命令编译",
    "url": "/posts/iw%E5%B7%A5%E5%85%B7%E7%BC%96%E8%AF%91/",
    "categories": "Blogging, Linux",
    "tags": "rootfs",
    "date": "2022-03-24 22:05:53 +0800",
    





    "snippet": "iw 命令编译–交叉编译准备工作移植libnl下载:源码configure:./configure --prefix=/run/media/fly/rootfs --target=arm-linux-gnueabihf --host=arm-linux-gnueabihf --build=x86_64-linux-gnu CC=arm-linux-gnueabihf-gcc AR=arm-linux-gnueabihf-ar或./configure --host=arm-linux-gnueabihf --build=armv7l --prefix=/run/media/fly/rootfs编译安装:make &amp; make install移植iw下载:源码添加环境(目录为libnl安装目录lib及其下的pkgconfig目录):export PKG_CONFIG_PATH=/home/xy/work/lib/pkgconfig:$PKG_CONFIG_PATH 修改Makefile:在iw下添加-lpthread -lm避免未定义错误编译安装:make CC=arm-linux-gnueabihf-gccmake install简单使用            命令      说明                  iw help      查看帮助              iw dev wlan0 scan      扫描              iw dev wlan0 link      查看连接信息              iw wlan0 connect foo      连接到未加密的ap              iw wlan0 connect foo keys 0:abcde d:1:0011223344      连接到wep加密的ap        连接wpa2加密wifi使用wpa_supplicant"
  },
  
  {
    "title": "R4S 系统安装小记录",
    "url": "/posts/R4S%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/",
    "categories": "Blogging, Linux",
    "tags": "rootfs",
    "date": "2022-03-23 00:03:51 +0800",
    





    "snippet": "为R4S软路由安装系统，测试了一下不同的发行版的根文件系统，尝试了一下内核编译和引导R4S系统安装小记录准备编译环境安装交叉编译工具链，对应archlinux安装以下包即可aarch64-linux-gnu-binutilsaarch64-linux-gnu-gccaarch64-linux-gnu-gdbaarch64-linux-gnu-glibcaarch64-linux-gnu-linux-api-headers准备tf卡准备空sd卡，插入电脑，将tf卡格式化，sdX为tf卡根盘符dd if=/dev/zero of=/dev/sdX bs=1M count=32使用fdisk创建分区fdisk /dev/sdX# 依次输入以下命令o\t\t#创建新的msdos格式分区n\t\t#创建新分区p\t\t#p选择主分区1\t\t#分区第一个分区32768\t#配置分区偏移，分区的首个(块)扇区设置为32768\t\t#这里配置分区结尾，或者直接回车默认最大值w\t\t#保存分区表格式化分区，此处由于采用单系统盘，不再另建boot分区，格式化时务必选择uboot及kernel均支持的文件系统，如ext4,btrfs等mkfs.btrfs -f -L \"rootfs\" /dev/sdX1至此tf卡准备完成uboot制作编译ATF(Arm trust firmware)ATF 主要负责在启动 U-Boot 之前把 CPU 从安全的 EL3 切换到 EL2，然后跳转到 U-Boot，并且在内核启动后负责启动其他的 CPU下载arm-trusted-firmwaregit clone https://github.com/ARM-software/arm-trusted-firmware.git编译make CROSS_COMPILE=aarch64-linux-gnu- PLAT=rk3399注：如果遇到 ‘.pmusram’ will not fit in region ‘PMUSRAM’ 相关错误，请更换使用其他版本工具链编译编译，此问题可能与工具链版本有关编译uboot下载ubootgit clone https://gitlab.denx.de/u-boot/u-boot.git将编译好的ATF文件拷贝至uboot根目录cp arm-trusted-firmware/build/rk3399/release/bl31/bl31.elf u-boot/编译uboot# 默认配置make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" nanopi-r4s-rk3399_defconfig# 手动配置，此处记得打开对应的文件系统支持，以支持文件读写，务必打开启动脚步所在分区的文件系统make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" menuconfig# 编译export BL31=bl31.elf &amp;&amp; make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\"注：可能提示dtc等命令找不到的问题，需要安装dtc等依赖包，各个系统预装不同，此处无法一一列出烧录将编译好的idbloader.img，u-boot.itb文件烧录至sd卡注意：将idbloader.img的偏移配置为64，将u-boot.itb的偏移配置为16384cd u-bootdd if=idbloader.img of=/dev/sdX seek=64 conv=notruncdd if=u-boot.itb of=/dev/sdX seek=16384 conv=notrunc至此，uboot烧录完成，可以将tf卡插入设备，连接调试串口(波特率为1500000)，尝试启动正常情况下，可以在串口看到uboot启动信息：SoC: Rockchip rk3399Reset cause: PORModel: FriendlyElec NanoPi R4SDRAM:  3.9 GiBPMIC:  RK808Core:  259 devices, 22 uclasses, devicetree: separate并可以通过串口输入，执行uboot内置的指令kernel制作内核编译官网下载linux kernel源码，使用以下命令编译安装# 默认配置make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64 defconfig# 手动配置，注意开启相关文件系统支持，以支持前面格式化时使用的文件系统，# 如果启动后提示文件系统不支持，则需要将文件系统直接编译进内核，而不是编译为模块make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64 menuconfig# kernel编译make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64内核安装# 分区挂载mount /dev/sdX /mnt# 安装kernelmake ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64 INSTALL_PATH=\"/mnt/boot/\" install# 安装dtb，注意要安装到boot下的dtb目录而不是dtbs目录，uboot默认读取位置为dtb,否则需要修改uboot变量以支持其他目录make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64 INSTALL_DTBS_PATH=\"/mnt/boot/dtbs\" dtbs_install# 安装modulesmake ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CFLAGS=\"-O2 -pipe -march=armv8-a -mfloat-abi=hard\" -j64 INSTALL_MOD_PATH=\"/mnt\" modules_install# 输入sync指令，确保数据均从缓存已写入磁盘sync创建boot.scr引导文件创建boot.cmd文件，将以下内容写入文件，注意将/boot/dtbs改为我们的安装目录/boot/dtb# MAC address (use spaces instead of colons)setenv macaddr da 19 c8 7a 6d f4part uuid ${devtype} ${devnum}:${bootpart} uuidsetenv bootargs console=ttyS2,1500000 root=PARTUUID=${uuid} rw rootwait earlycon=uart8250,mmio32,0xff1a0000setenv fdtfile rockchip/rk3399-nanopi-r4s.dtbif load ${devtype} ${devnum}:${bootpart} ${kernel_addr_r} /boot/Image; then  if load ${devtype} ${devnum}:${bootpart} ${fdt_addr_r} /boot/dtbs/${fdtfile}; then    fdt addr ${fdt_addr_r}    fdt resize    fdt set /ethernet@fe300000 local-mac-address \"[${macaddr}]\"    if load ${devtype} ${devnum}:${bootpart} ${ramdisk_addr_r} /boot/initramfs-linux.img; then      booti ${kernel_addr_r} ${ramdisk_addr_r}:${filesize} ${fdt_addr_r};    else      booti ${kernel_addr_r} - ${fdt_addr_r};    fi;  fi;fi编译boot.scr需要安装mkimage工具，archlinux下为uboot-toolsmkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n \"R4S boot script\" -d boot.cmd /mnt/boot/boot.scr查看是否在tf卡的boot目录下生成了boot.scr文件ls /mnt# 使用sync写入磁盘sync# 磁盘卸载umount /dev/sdX1至此，kernel安装完成，可以将tf卡插入设备，连接调试串口(波特率为1500000)，尝试启动正常情况下，可以在串口看到uboot启动信息，并看到boot.src载入信息：Found U-Boot script /boot/boot.scr以及 内核启动信息：[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]制作根文件系统目前，设备已可以进入uboot，并启动内核，但还缺少可用的系统环境，根文件系统可以使用各个linux开发版提供的aarch64系统，或使用开发工具自己制作，如基于busybox的根文件系统，或使用yocto项目来制作，或使用发行版提供的工具如crossdev等来制作，或参考lfs自行交叉编译基于archlinuxarm的根文件系统archlinuxarm提供了aarch64的根文件系统，直接下载，并解压至tf卡即可，注意内核文件可能会被覆盖，解压根文件系统后，需要重新执行内核安装步骤wget http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gzbsdtar -xpf ArchLinuxARM-aarch64-latest.tar.gz -C /mnt# 重新安装内核完成安装后即可启动archlinux系统了，默认用户alarm,密码alarm，root用户root，密码root记得首次启动后初始化一下pacman的密钥链pacman-key --initpacman-key --populate archlinuxarm基于void-linux的根文件系统void-linux也为aarch64提供了基础的rootfs根文件系统，可以使用此包wget https://alpha.de.repo.voidlinux.org/live/current/void-aarch64-ROOTFS-20210930.tar.xz# 为防止内核文件覆盖，系统解压后建议重新执行内核安装步骤安装qemu虚拟环境以支持chroot进行后续配置，可能需要的包如下：qemu-user-staticbinfmt-qemu-staticqemu-arch-extra将可能用到的命令复制到rootfs环境cp /usr/bin/qemu-arm-static /mnt/usr/bin/cp /usr/bin/qemu-aarch64-static usr/bin/重启binfmtsystemctl restart systemd-binfmt.service使用chroot或systemd-nspawn进入虚拟环境systemd-nspawn -D /mnt根据void指导手册安装需要的包，并进行必要的系统配置可以参考installation guides# 安装基础系统xbps-install -Su xbpsxbps-install -uxbps-install base-systemxbps-remove base-voidstrap# 安装配置# 配置主机名vi /etc/hostname# 配置启动设置vi /etc/rc.conf# 配置localesvi /etc/default/libc-locales# 运行以下命令更新localesxbps-reconfigure -f glibc-locales# 配置root密码passwd root# 配置fstabvi /etc/fstab# 刷新包配置xbps-reconfigure -fa# 退出chroot环境，使用ctrl+]]]，按三次]键至此系统基础配置完成，可以将tf卡插入设备，尝试启动系统，但是无法串口登陆，后续有时间再研究吧可以参考此文档说明添加串口登陆配置启用相关服务基于Alpine Linux的根文件系统下载文件GENERIC ARMMINI ROOT FILESYSTEM为防止内核文件覆盖，系统解压后建议重新执行内核安装步骤使用同样的步骤进入chroot环境配置安装qemu虚拟环境以支持chroot进行后续配置，可能需要的包如下：qemu-user-staticbinfmt-qemu-staticqemu-arch-extra将可能用到的命令复制到rootfs环境cp /usr/bin/qemu-arm-static /mnt/usr/bin/cp /usr/bin/qemu-aarch64-static usr/bin/重启binfmtsystemctl restart systemd-binfmt.service使用chroot或systemd-nspawn进入虚拟环境systemd-nspawn -D /mnt基础系统配置修改国内源vi /etc/apk/repositories将地址改为阿里云镜像：https://mirrors.aliyun.com/alpine/v3.15/mainhttps://mirrors.aliyun.com/alpine/v3.15/community软件包更新apk updateapk upgrade安装基础启动包alpine-base，这个包中包含了openrc，alpine-conf，busybox-initscripts等启动及配置用软件apk add alpine-base配置root密码passwd root为设备增加串行控制台：参考官方wiki在启动时启用串行控制台# 在boot启动参数中增加console=选项# 此参数已在boot.scr中添加# 在系统中添加串口参数vi /etc/inittab# 添加以下内容，或打开注释修改对应行ttyS2::respawn:/sbin/getty -L ttyS2 1500000 vt100由于alpine默认禁止root用户登陆调试串口，此时可以修改配置，或新增一个普通用户新增普通用户的步骤可以参考官方wikiSetting up a new user后续步骤可以迁移至tf卡启动后再配置，配置方式可以参考Post installation退出chroot环境，使用ctrl+]]]，按三次]键基于Fedora的根文件系统下载fedora aarch64 minimal根文件系统包Fedora-Minimal-35-1.2.aarch64.raw.xz内核配置，fedora默认开启zram,需要打开内核ZRAM配置，否则会提示找不到/dev/zram0设备可能需要开启ZSMALLOC后才能选择ZRAM选项，然后重新安装内核修改etc/fstab为安装设备的真实目录vi etc/fstab强制卸载软件包rpm -e 本机已经安装的冲突版本包名 --nodeps参考文献  在 RK3399 上部署最新的 Linux 5.4 和 U-Boot v2020 .01  uboot-orangepi-rk3399  Archlinuxarm Rock64  voidlinux documentation  voidlinux allow root login  rk3399 fails to build: region PMUSRAM overflowed  Alpine Linux Wiki  alpine linux更换国内源  在树莓派 3 上安装 Fedora"
  }
  
]

